[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "escape-cage-rl"
version = "1.0.0"
description = "AI agent learns to escape from a cage using reinforcement learning and Unity integration"
authors = ["AI Research Team <team@escapecage.ai>"]
readme = "README.md"
homepage = "https://github.com/your-org/escape-cage-rl"
repository = "https://github.com/your-org/escape-cage-rl"
documentation = "https://escape-cage-rl.readthedocs.io"
keywords = ["reinforcement-learning", "unity", "ai", "ppo", "escape-cage"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.8"
# Core ML and Deep Learning Framework
tensorflow = ">=2.13.0,<3.0.0"
keras = ">=2.13.0,<3.0.0"

# Reinforcement Learning
gymnasium = "^0.29.0"
stable-baselines3 = "^2.0.0"

# Data Science and Numerical Computing
numpy = "^1.24.0"
pandas = "^1.5.0"
matplotlib = "^3.6.0"
scipy = "^1.10.0"

# Development and Visualization Tools
jupyter = "^1.0.0"
jupyterlab = "^3.6.0"
tensorboard = "^2.13.0"
seaborn = "^0.12.0"

# Additional Utilities
pyyaml = "^6.0"
pillow = "^9.5.0"
tqdm = "^4.65.0"
pathlib2 = "^2.3.7"

# Performance and Monitoring
psutil = "^5.9.0"
memory-profiler = "^0.60.0"

[tool.poetry.group.dev.dependencies]
# Testing and Quality Assurance
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-xvfb = "^3.0.0"  # For headless testing with Unity
unittest-xml-reporting = "^3.2.0"

# Type Checking and Code Quality
mypy = "^1.0.0"
black = "^23.0.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
pre-commit = "^3.3.0"

# Documentation
sphinx = "^6.0.0"
sphinx-rtd-theme = "^1.2.0"
myst-parser = "^1.0.0"

# Profiling and Debugging
line-profiler = "^4.0.0"
py-spy = "^0.3.14"

[tool.poetry.group.test.dependencies]
pytest-benchmark = "^4.0.0"
pytest-mock = "^3.10.0"
coverage = "^7.2.0"

[tool.poetry.scripts]
train-escape-ai = "ml_training.escape_cage_trainer:main"
fast-train = "ml_training.fast_training:fast_train_ai"
test-ai = "ml_training.test_trained_ai:main"
manage-models = "ml_training.model_manager:main"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | logs
  | models
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ml_training", "communication", "tests"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "stable_baselines3.*",
    "gymnasium.*",
    "tensorflow.*",
    "keras.*",
    "unity_bridge",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=ml_training",
    "--cov=communication", 
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
]

[tool.coverage.run]
source = ["ml_training", "communication"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "logs",
    "models",
    ".venv",
    ".env",
] 